// <auto-generated />
using System;
using Application.Web.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Application.Web.Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230627161016_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Web.Database.Models.BillingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text");

                    b.Property<string>("CVV")
                        .HasColumnType("text");

                    b.Property<string>("CardNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BillingInfo");
                });

            modelBuilder.Entity("Application.Web.Database.Models.CompletedTrip", b =>
                {
                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Ammount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DropOffTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InsuranceFine")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PickUpTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Tip")
                        .HasColumnType("numeric");

                    b.HasKey("TripId");

                    b.ToTable("CompletedTrip");
                });

            modelBuilder.Entity("Application.Web.Database.Models.DriverLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DriverLicenseExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DriverLicenseNo")
                        .HasColumnType("text");

                    b.Property<string>("LicenseType")
                        .HasColumnType("text");

                    b.Property<string>("SSN")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DriverLicense");
                });

            modelBuilder.Entity("Application.Web.Database.Models.IncompleteTrip", b =>
                {
                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CancleTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("TripId");

                    b.ToTable("IncompleteTrip");
                });

            modelBuilder.Entity("Application.Web.Database.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text");

                    b.Property<string>("CVV")
                        .HasColumnType("text");

                    b.Property<string>("CardNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Application.Web.Database.Models.TripRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DropOffLocation")
                        .HasColumnType("text");

                    b.Property<Guid>("LesseeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PickUpLocation")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LesseeId");

                    b.HasIndex("LessorId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("TripRequest");
                });

            modelBuilder.Entity("Application.Web.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("DoB")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Application.Web.Database.Models.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Application.Web.Database.Models.UserTypeType", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "UserTypeId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserTypeType");
                });

            modelBuilder.Entity("Application.Web.Database.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsuranceExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InsuranceNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ManufactureYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModelName")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Application.Web.Database.Models.BillingInfo", b =>
                {
                    b.HasOne("Application.Web.Database.Models.User", "User")
                        .WithMany("BillingInfoList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Web.Database.Models.CompletedTrip", b =>
                {
                    b.HasOne("Application.Web.Database.Models.TripRequest", "TripRequest")
                        .WithOne("CompletedTrip")
                        .HasForeignKey("Application.Web.Database.Models.CompletedTrip", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripRequest");
                });

            modelBuilder.Entity("Application.Web.Database.Models.DriverLicense", b =>
                {
                    b.HasOne("Application.Web.Database.Models.User", "User")
                        .WithMany("DriverLicenseList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Web.Database.Models.IncompleteTrip", b =>
                {
                    b.HasOne("Application.Web.Database.Models.TripRequest", "TripRequest")
                        .WithOne("IncompleteTrip")
                        .HasForeignKey("Application.Web.Database.Models.IncompleteTrip", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TripRequest");
                });

            modelBuilder.Entity("Application.Web.Database.Models.TripRequest", b =>
                {
                    b.HasOne("Application.Web.Database.Models.User", "Lessee")
                        .WithMany("LesseeTripRequestList")
                        .HasForeignKey("LesseeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Web.Database.Models.User", "Lessor")
                        .WithMany("LessorTripRequestList")
                        .HasForeignKey("LessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Web.Database.Models.PaymentMethod", "PaymentMethod")
                        .WithOne("TripRequest")
                        .HasForeignKey("Application.Web.Database.Models.TripRequest", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Web.Database.Models.Vehicle", "Vehicle")
                        .WithMany("TripRequests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lessee");

                    b.Navigation("Lessor");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Application.Web.Database.Models.UserTypeType", b =>
                {
                    b.HasOne("Application.Web.Database.Models.User", "User")
                        .WithMany("UserTypeTypeList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.Web.Database.Models.UserType", "UserType")
                        .WithMany("UserTypeTypeList")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Application.Web.Database.Models.Vehicle", b =>
                {
                    b.HasOne("Application.Web.Database.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Application.Web.Database.Models.PaymentMethod", b =>
                {
                    b.Navigation("TripRequest");
                });

            modelBuilder.Entity("Application.Web.Database.Models.TripRequest", b =>
                {
                    b.Navigation("CompletedTrip");

                    b.Navigation("IncompleteTrip");
                });

            modelBuilder.Entity("Application.Web.Database.Models.User", b =>
                {
                    b.Navigation("BillingInfoList");

                    b.Navigation("DriverLicenseList");

                    b.Navigation("LesseeTripRequestList");

                    b.Navigation("LessorTripRequestList");

                    b.Navigation("UserTypeTypeList");
                });

            modelBuilder.Entity("Application.Web.Database.Models.UserType", b =>
                {
                    b.Navigation("UserTypeTypeList");
                });

            modelBuilder.Entity("Application.Web.Database.Models.Vehicle", b =>
                {
                    b.Navigation("TripRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
